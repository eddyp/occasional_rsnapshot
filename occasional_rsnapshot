#!/bin/bash

RSNAPSHOT=${RSNAPSHOT:=/usr/bin/rsnapshot}


declare -A min_int
min_int[yearly]=31536000 # 3600 * 24 * 365
min_int[monthly]=2592000 #3600 * 24 * 30
min_int[weekly]=604800 # 3600 * 24 * 7
min_int[daily]=86400 # 3600 * 24
min_int[hourly]=3600

declare -A nextint
nextint[yearly]=''
nextint[monthly]='yearly'
nextint[weekly]='monthly'
nextint[daily]='weekly'
nextint[hourly]='daily'

declare -A prevint
prevint[yearly]='monthly'
prevint[monthly]='weekly'
prevint[weekly]='daily'
prevint[daily]='hourly'
prevint[hourly]=''

possible_intervals="yearly monthly weekly daily hourly"


# Parameters:
#   $1 = interval
# Uses:
#   $CONF
# test if the configuration requires the given type of interval
config_has_interval()
{
	[ "$1" ] || return 1
	grep -q "^\s*retain\s\s*$1" "$CONF"
}

# Parameters:
#   $1 = interval
# Uses:
#   $CONF
# returns the number of backups for the given type of interval
retain_count()
{
	grep "^\s*retain\s\s*$1" "$CONF" | sed "s#^.*$1\s*\([0-9]*\)#\1#"
}

# Parameters: NONE
# returns the shortest interval which backup was configured for
shortest_interval ()
{
	ret=''
	for i in $possible_intervals ; do
		config_has_interval $i && ret=$i || true
	done
	debug "Shortest interval in configuration is '$ret'."

	echo "$ret"
}

# Parameters:
#  $1 = interval
# Uses:
#  $SROOT
# returns true if
#  1) given interval is the shortest one
#  2) the smaller interval preceding the given interval contains the
#     oldest possible instance of the backup for it
#     examples:
#      - can backup 'weekly' if 'daily.6' exists
#      - can backup 'yearly' if 'monthly.11' exists
can_backup_interval ()
{
	interval=$1

	[ "$(shortest_interval)" != "$interval" ] || return 0
	debug "Interval $interval is not the shortest one."

	pint=${prevint[$interval]}
	debug "Next smaller interval than '$interval' is '$pint'."

	prev_retain_count="$(retain_count ${pint})"
	# TODO: if no previous interval is configured, something's fishy;
	#       maybe making a backup is a better idea
	if [ -z "$prev_retain_count" ] ; then
		debug "Something's fishy: $interval is not the shortest, but ${prevint[$interval]} has no retain value. Maybe the configuration is incorrect?"
		return 1
	fi
	debug "Configured retain count for '$pint' is '$prev_retain_count'."

	must_exist_dir="${SROOT}${pint}.$(( ${prev_retain_count} - 1 ))"
	# if the maximum from the smaller interval exists, then we can
	# backup this interval, otherwise, it makes no sense since we might
	# lose info
	if [ -d "${must_exist_dir}" ]; then
		debug "Directory '$must_exist_dir' exists, so '$interval' can be backed up, too."
		return
	else
		debug "Directory '$must_exist_dir' is NOT present, so trying to backup the '$interval' interval doesn't make sense."
		return 1
	fi
}

# Parameters:
#   $1 = interval
# Uses:
#   $ROOT
# Returns:
#   the list of time stamps of the existing backups for the given
#   interval or empty string, if no backup exists
get_file_timestamps()
{
	local interval=$1
	local timestamps

	[ "$interval" ] || return

	timestamps="$(ls -utlp --time-style +%s "$SROOT" | grep "${interval}\.[0-9]*/" | tr -s ' ' | cut -f 6 -d ' ' | tr '\n' ' ')"
	# remove the trailing space
	timestamps="${timestamps% }"

	echo "$timestamps"
}

# Parameters:
#   $1 = interval
# Uses:
#   $SROOT
# returns the interval name if a backup for the given interval is necessary
needs_interval()
{
	# test if the configuration requires the given type of interval
	config_has_interval "$1" || return

	result=''
	local interval=$1
	local retained=0
	local wantoretain="$(retain_count $interval)"
	local min_passed=${min_int[$interval]}

	# hourly is not ran once/hour, unlike other intervals
	# we want to check if the minimum number of hours has passed, if we evaluate hourly
	[ "$interval" != "hourly" ] || min_passed=$(( ${min_int[daily]} / ${wantoretain} ))


	timestamps="$(get_file_timestamps $interval)"
	# XXX: don't invoke subshell
	retained="$(echo $timestamps | wc -w)"
	debug "Currently retained $interval backups: $retained"

	# TODO: Compare the minimum threshold for $interval against all snapshots in smaller
	#       intervals. If any of the smaller intervals are older than the threshold for
	#       current interval, then we should consider the current interval, too.
	#
	#       This could happen if there was manual intervention in the backups, maybe due
	#       to older or broken verisions of occasional_rsnapshot.

	if [ $retained -gt 0 ] ; then
		nowint=$( date "+%s" )
		fileint="${timestamps%% *}"
		dif=$(( $nowint - $fileint ))

		debug "Most recent backup in '$interval' interval is ${dif} s away from now (Threshold is ${min_passed[$interval]} s)."

		# has the interval passed?
		[ $dif -lt $min_passed ] || result="$interval"

	elif [ $retained -eq 0 ] && [ "$interval" = "$(shortest_interval)" ]; then
		debug "No backups for shortest interval $interval. Backup will be done."
		result="$interval"  # not necessary, but here in case of future changes
		return

	fi

	[ "$result" ] && can_backup_interval "$interval" || return 1
	debug "needs_interval concluded '$result' is necessary"
}

# returns the intervals for which a backup must be made
# based on the configuration and the already existing backups
get_required_intervals ()
{
	local intervals=''

	for i in $possible_intervals ; do
		if config_has_interval $i ; then
			if needs_interval $i ; then
				intervals="$intervals $i"
			fi
		fi
	done

	echo $intervals
}

debug()
{
	[ "$DEBUG_OCCASIONAL_RSNAPSHOT" ] || return
	echo "DEBUG [$$]: $@" >&2
}

if [ "$1" = "--debug" ]; then
	RSNAPSHOT="echo (dry run): $RSNAPSHOT"
	DEBUG_OCCASIONAL_RSNAPSHOT=yes
	shift
fi

if [ $# -ne 1 ]; then
	cat <<EOHELP
This utility needs the rsnaphot confguration file as parameter.

Usage:

    $0 [--debug] /path/to/rsnapshot.conf

  The script tries to find the snapshot_root based on the
  information in the configuration file, then, if found, it
  starts the appropriate backups that are detected as
  necessary since the last time the backup was made.

  If the script does not find the snapshot_root, it will
  terminate silently, since it assumes the drive is not
  connected.

  Because the script is silent by default when no drive is
  found, it makes it appropriate for placing in cron with a
  very high frequency as a means of triggering backups just by
  connecting the backup drive; no noise will be made in the
  cron emails when the srcipt does not find the backup drive
  connected.

EOHELP
	exit 1
fi

CONF="$1"
[ ! -f "$CONF" ] && echo "Configuration file '$CONF' not found." && exit 1 || true


SROOT=$(grep '^\s*snapshot_root\s' "$CONF" | sed 's#snapshot_root\s\s*##')
# if the backup destination does not exist, probably the disk is not mounted
[ -d "$SROOT" ] || exit 0

# we assume that if the lockfile is present, another rsnapshot
# is ongoing, so we  just exit silently not to cause noise in
# the cron mails
LOCKF=$(grep '^\s*lockfile\s' "$CONF" | sed 's#lockfile\s\s*##')
[ -f "$LOCKF" ] && exit 0

# Avoid the situation where two consecutive executions via cron
# synchronize in such a way that the later spawned occasional_rsnapshot
# inserts itself right between a larger interval and the lower next one
# from the first's execution.
# This can happen when using delayed removal of the oldest snapshot
# because the rsnapshot pid is removed at this point, but the
# occasional_rsnapshot script hasn't finished at this point.
# We avoid this situation by making our own lockfile.
OCCLOCKF=$(grep '^\s*lockfile\s' "$CONF" | sed -e 's#lockfile\s\s*##' -e 's#\(.pid\)*\s*$#.occasional.pid#')
OCCPIDD=$(dirname ${OCCLOCKF})
[ -d "${OCCPIDD}" ] || mkdir -p "${OCCPIDD}"
debug "Race for the lock!"
if [ -f "$OCCLOCKF" ]; then
	OCCPID=$(cat $OCCLOCKF)
	# check if the previous instance is alive
	if [ "$OCCPID" ] && ps -p $OCCPID -o comm= >/dev/null ; then
		exit 0
	fi
	[ "$OCCPID" ] && debug "Found stale occasional_rsnapshot PID file $OCCLOCKF." || true
fi
debug "Aquiring lock"
echo $$ | tr -d '\n' > $OCCLOCKF
# make sure we did aquire the lock
for wait in $(seq 3); do
	sleep $wait
	# did we aquire lock?
	grep -q $$ $OCCLOCKF || exit 0
done
debug "Got the lock!"
trap "[ -f "$OCCLOCKF" ] && grep -q $$ $OCCLOCKF 2>&1 >/dev/null && rm -f $OCCLOCKF" TERM INT EXIT


set -e

for i in $(get_required_intervals) ; do
	# sadly 'echo -n' is not portable, but I am too lazy to fix this
	# just for some pretty printing in the cron email.
	echo -n "Starting rsnapshot at interval $i... "
	${RSNAPSHOT} -c "$CONF" $i
	echo 'done.'
done

